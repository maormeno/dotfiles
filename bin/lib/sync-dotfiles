#!/usr/bin/env node

/* eslint-disable no-await-in-loop */

// Makes symlinks for dotfiles: ~/dotfiles/tilde/.bashrc => ~/.bashrc.
//
// Author: Artem Sapegin, sapegin.me
// License: MIT
// https://github.com/sapegin/dotfiles
//

const fs = require('fs-extra');
const glob = require('glob');
const userHome = require('user-home');
const prompts = require('prompts');

const TILDE_DIR = `${userHome}/dotfiles/tilde`;
const IGNORE = ['.config', '.local', '.DS_Store'];

function isSymlinkTo(link, dest) {
	const statLink = fs.lstatSync(link);
	if (statLink.isSymbolicLink() === false) {
		return false;
	}

	return fs.realpathSync(link) === fs.realpathSync(dest);
}

async function confirmAction(message) {
	const answer = await prompts({
		type: 'confirm',
		name: 'value',
		message,
		initial: false,
	});

	// User pressed Cmd+C?
	if (answer.value === undefined) {
		process.exit(1);
	}

	return answer.value;
}

async function syncDotfiles() {
	process.chdir(TILDE_DIR);
	const files = [
		...glob.sync('.*'),
		...glob.sync('.config/*'),
		...glob.sync('.local/share/*'),
	];

	for (const sourcePath of files) {
		const destPath = `${userHome}/${sourcePath}`;

		if (IGNORE.includes(sourcePath)) {
			continue;
		}

		// Check that we aren't overwriting anything
		if (fs.existsSync(destPath)) {
			// Already a symlink to dotfiles?
			if (isSymlinkTo(destPath, sourcePath)) {
				continue;
			}

			// Should overwrite?
			const shouldOverwrite = await confirmAction(
				`File already exists: ${destPath}. Overwrite?`
			);
			if (shouldOverwrite === false) {
				console.log('Skipping...');
				continue;
			}

			// Remove
			fs.removeSync(destPath);
		}

		// Create a symlink
		fs.ensureSymlinkSync(sourcePath, destPath);

		console.log('ü¶ê', sourcePath, '‚Üí', destPath);
	}
}

async function main() {
	console.log('Syncing dotfiles...');
	await syncDotfiles();
	console.log('Done.');
}

main();
